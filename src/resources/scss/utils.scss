@use 'colors';
@use 'border';

.flex {
	display: flex;
}
.flex-row {
	flex-direction: row;
}
.flex-column {
	flex-direction: column;
}
.flex-grow-1 {
	flex-grow: 1;
}
.flex-grow-0 {
	flex-grow: 0;
}
.flex-shrink-1 {
	flex-shrink: 1;
}
.flex-shrink-0 {
	flex-shrink: 0;
}
.justify-content-center {
	justify-content: center;
}
.justify-self-center {
	justify-self: center;
}
.align-items-center {
	align-items: center;
}
.align-self-center {
	align-self: center;
}
.text-center {
	text-align: center;
}
.text-justify {
	text-align: justify;
}
.width-full {
	width: 100%;
}
.height-full {
	height: 100%;
}
.overflow-hidden {
	overflow: hidden;
}
.overflow-scroll {
	overflow: scroll;
}
.overflow-x-scroll {
	overflow-x: scroll;
}
.overflow-y-scroll {
	overflow-x: scroll;
}
.overflow-x-hidden {
	overflow-x: hidden;
}
.overflow-y-hidden {
	overflow-x: hidden;
}
.grid {
	display: grid;
}
.grid-auto-column {
	display: grid;
	grid-auto-flow: column;
}
.grid-auto-row {
	display: grid;
	grid-auto-flow: row;
}
$types: '', -top, -bottom, -left, -right;
@for $var from 0 through 200 {
	.width-#{$var * 25} {
		width: 0.01rem * 25 * $var;
	}
	.height-#{$var * 25} {
		width: 0.01rem * 25 * $var;
	}
	.max-width-#{$var * 25} {
		width: 0.01rem * 25 * $var;
	}
	.max-height-#{$var * 25} {
		height: 0.01rem * 25 * $var;
	}

	@each $type in $types {
		.padding#{$type}-#{$var * 25} {
			padding#{$type}: 0.01rem * 25 * $var;
		}
		.margin#{$type}-#{$var * 25} {
			margin#{$type}: 0.01rem * 25 * $var;
		}
	}
	.grid-row-gap-#{$var * 25} {
		grid-row-gap: 0.01rem * 25 * $var;
	}
	.grid-column-gap-#{$var * 25} {
		grid-column-gap: 0.01rem * 25 * $var;
	}
}

// Percentages
@for $var from 0 through 100 {
	.width--#{$var} {
		width: percentage($var/100);
	}
	.height--#{$var} {
		width: percentage($var/100);
	}
	.max-width--#{$var} {
		width: percentage($var/100);
	}
	.max-height--#{$var} {
		width: percentage($var/100);
	}
}

@each $color_variant, $color_value in colors.$map {
	.color-#{'' + $color_variant} {
		color: $color_value;
	}
	.bg-#{'' + $color_variant} {
		background: $color_value;
	}
	.fill-#{'' + $color_variant} {
		fill: $color_value;
	}
}

@each $radius_variant, $radius_value in border.$radius {
	.radius-#{$radius-variant} {
		border-radius: $radius_value !important;
	}
}
